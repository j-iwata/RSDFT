C
C     FFTE: A FAST FOURIER TRANSFORM PACKAGE
C
C     (C) COPYRIGHT SOFTWARE, 2000-2004, 2008-2011, ALL RIGHTS RESERVED
C                BY
C         DAISUKE TAKAHASHI
C         FACULTY OF ENGINEERING, INFORMATION AND SYSTEMS
C         UNIVERSITY OF TSUKUBA
C         1-1-1 TENNODAI, TSUKUBA, IBARAKI 305-8573, JAPAN
C         E-MAIL: daisuke@cs.tsukuba.ac.jp
C
C
C     PARALLEL 3-D COMPLEX FFT ROUTINE
C
C     FORTRAN77 + MPI SOURCE PROGRAM
C
C     CALL PZFFT3D(A,B,NX,NY,NZ,ICOMM,NPU,IOPT)
C
C     NX IS THE LENGTH OF THE TRANSFORMS IN THE X-DIRECTION (INTEGER*4)
C     NY IS THE LENGTH OF THE TRANSFORMS IN THE Y-DIRECTION (INTEGER*4)
C     NZ IS THE LENGTH OF THE TRANSFORMS IN THE Z-DIRECTION (INTEGER*4)
C       ------------------------------------
C         NX = (2**IP) * (3**IQ) * (5**IR)
C         NY = (2**JP) * (3**JQ) * (5**JR)
C         NZ = (2**KP) * (3**KQ) * (5**KR)
C       ------------------------------------
C     ICOMM IS THE COMMUNICATOR (INTEGER*4)
C     NPU IS THE NUMBER OF PROCESSORS (INTEGER*4)
C     IOPT = 0 FOR INITIALIZING THE COEFFICIENTS (INTEGER*4)
C     IOPT = -1 FOR FORWARD TRANSFORM WHERE
C              A(NX,NY,NZ/NPU) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(*,*,BLOCK)
C              B(NX,NY,NZ/NPU) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(*,*,BLOCK)
C     IOPT = +1 FOR INVERSE TRANSFORM WHERE
C              A(NX,NY,NZ/NPU) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(*,*,BLOCK)
C              B(NX,NY,NZ/NPU) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(*,*,BLOCK)
C     IOPT = -2 FOR FORWARD TRANSFORM WHERE
C              A(NX,NY,NZ/NPU) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(*,*,BLOCK)
C              B(NX/NPU,NY,NZ) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(BLOCK,*,*)
C     IOPT = +2 FOR INVERSE TRANSFORM WHERE
C              A(NX/NPU,NY,NZ) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(BLOCK,*,*)
C              B(NX,NY,NZ/NPU) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(*,*,BLOCK)
C
C     WRITTEN BY DAISUKE TAKAHASHI
C
      SUBROUTINE PZFFT3D(A,B,NX,NY,NZ,ICOMM,NPU,IOPT)
      IMPLICIT REAL*8 (A-H,O-Z)
      INCLUDE 'param.h'
      COMPLEX*16 A(*),B(*)
      COMPLEX*16 C((NDA3+NP)*NBLK),D(NDA3)
      COMPLEX*16 WX(NDA3),WY(NDA3),WZ(NDA3)
      DIMENSION LNX(3),LNY(3),LNZ(3)
      SAVE WX,WY,WZ
C
      NN=NX*NY*(NZ/NPU)
C
      CALL FACTOR(NX,LNX)
      CALL FACTOR(NY,LNY)
      CALL FACTOR(NZ,LNZ)
C
      IF (IOPT .EQ. 0) THEN
        CALL SETTBL(WX,NX)
        CALL SETTBL(WY,NY)
        CALL SETTBL(WZ,NZ)
        RETURN
      END IF
C
      IF (IOPT .EQ. 1 .OR. IOPT .EQ. 2) THEN
!$OMP PARALLEL DO
!DIR$ VECTOR ALIGNED
        DO 10 I=1,NN
          A(I)=DCONJG(A(I))
   10   CONTINUE
      END IF
C
      IF (IOPT .EQ. -1 .OR. IOPT .EQ. -2) THEN
!$OMP PARALLEL PRIVATE(C,D)
        CALL PZFFT3DF(A,A,A,A,B,B,B,C,C,D,WX,WY,WZ,NX,NY,NZ,LNX,LNY,LNZ,
     1                ICOMM,NPU,IOPT)
!$OMP END PARALLEL
      ELSE
!$OMP PARALLEL PRIVATE(C,D)
        CALL PZFFT3DB(A,A,A,B,B,B,B,C,C,D,WX,WY,WZ,NX,NY,NZ,LNX,LNY,LNZ,
     1                ICOMM,NPU,IOPT)
!$OMP END PARALLEL
      END IF
C
      IF (IOPT .EQ. 1 .OR. IOPT .EQ. 2) THEN
        DN=1.0D0/(DBLE(NX)*DBLE(NY)*DBLE(NZ))
!$OMP PARALLEL DO
!DIR$ VECTOR ALIGNED
        DO 20 I=1,NN
          B(I)=DCONJG(B(I))*DN
   20   CONTINUE
      END IF
      RETURN
      END
      SUBROUTINE PZFFT3DF(A,AXPYZ,AXYZ,AXYZP,B,BXPYZ,BXYZP,CY,CZ,D,
     1                    WX,WY,WZ,NX,NY,NZ,LNX,LNY,LNZ,ICOMM,NPU,IOPT)
      IMPLICIT REAL*8 (A-H,O-Z)
      INCLUDE 'mpif.h'
      INCLUDE 'param.h'
      COMPLEX*16 A(NX,NY,*),AXPYZ(NX/NPU,NPU,NY,*),AXYZ(NX/NPU,NY,*),
     1           AXYZP(NX/NPU,NY*(NZ/NPU),*)
      COMPLEX*16 B(NX/NPU,NY,*),BXPYZ(NX/NPU,NPU,*),
     1           BXYZP(NX/NPU,NY,NZ/NPU,*)
      COMPLEX*16 CY(NY+NP,*),CZ(NZ+NP,*),D(*)
      COMPLEX*16 WX(*),WY(*),WZ(*)
      DIMENSION LNX(*),LNY(*),LNZ(*)
C
      NNX=NX/NPU
      NNZ=NZ/NPU
      NN=NX*NY*NNZ
C
!$OMP DO
      DO 100 K=1,NNZ
        DO 10 J=1,NY
          CALL FFT235(A(1,J,K),D,WX,NX,LNX)
   10   CONTINUE
        DO 90 L=1,NPU
          DO 80 II=1,NNX,NBLK
            DO 40 JJ=1,NY,NBLK
              DO 30 I=II,MIN0(II+NBLK-1,NNX)
!DIR$ VECTOR ALIGNED
                DO 20 J=JJ,MIN0(JJ+NBLK-1,NY)
                  CY(J,I-II+1)=AXPYZ(I,L,J,K)
   20           CONTINUE
   30         CONTINUE
   40       CONTINUE
            DO 50 I=II,MIN0(II+NBLK-1,NNX)
              CALL FFT235(CY(1,I-II+1),D,WY,NY,LNY)
   50       CONTINUE
            DO 70 J=1,NY
!DIR$ VECTOR ALIGNED
              DO 60 I=II,MIN0(II+NBLK-1,NNX)
                BXYZP(I,J,K,L)=CY(J,I-II+1)
   60         CONTINUE
   70       CONTINUE
   80     CONTINUE
   90   CONTINUE
  100 CONTINUE
!$OMP BARRIER
!$OMP MASTER
      CALL MPI_ALLTOALL(BXYZP,NN/NPU,MPI_DOUBLE_COMPLEX,AXYZ,NN/NPU,
     1                  MPI_DOUBLE_COMPLEX,ICOMM,IERR)
!$OMP END MASTER
!$OMP BARRIER
!$OMP DO
      DO 180 J=1,NY
        DO 170 II=1,NNX,NBLK
          DO 130 KK=1,NZ,NBLK
            DO 120 I=II,MIN0(II+NBLK-1,NNX)
!DIR$ VECTOR ALIGNED
              DO 110 K=KK,MIN0(KK+NBLK-1,NZ)
                CZ(K,I-II+1)=AXYZ(I,J,K)
  110         CONTINUE
  120       CONTINUE
  130     CONTINUE
          DO 140 I=II,MIN0(II+NBLK-1,NNX)
            CALL FFT235(CZ(1,I-II+1),D,WZ,NZ,LNZ)
  140     CONTINUE
          DO 160 K=1,NZ
!DIR$ VECTOR ALIGNED
            DO 150 I=II,MIN0(II+NBLK-1,NNX)
              B(I,J,K)=CZ(K,I-II+1)
  150       CONTINUE
  160     CONTINUE
  170   CONTINUE
  180 CONTINUE
      IF (IOPT .EQ. -2) RETURN
!$OMP BARRIER
!$OMP MASTER
      CALL MPI_ALLTOALL(B,NN/NPU,MPI_DOUBLE_COMPLEX,AXYZP,NN/NPU,
     1                  MPI_DOUBLE_COMPLEX,ICOMM,IERR)
!$OMP END MASTER
!$OMP BARRIER
!$OMP DO
      DO 210 J=1,NY*NNZ
        DO 200 L=1,NPU
!DIR$ VECTOR ALIGNED
          DO 190 I=1,NNX
            BXPYZ(I,L,J)=AXYZP(I,J,L)
  190     CONTINUE
  200   CONTINUE
  210 CONTINUE
      RETURN
      END
      SUBROUTINE PZFFT3DB(A,AXPYZ,AXYZP,B,BXPYZ,BXYZP,BXYZ,CY,CZ,D,
     1                    WX,WY,WZ,NX,NY,NZ,LNX,LNY,LNZ,ICOMM,NPU,IOPT)
      IMPLICIT REAL*8 (A-H,O-Z)
      INCLUDE 'mpif.h'
      INCLUDE 'param.h'
      COMPLEX*16 A(NX/NPU,NY,*),AXPYZ(NX/NPU,NPU,*),
     1           AXYZP(NX/NPU,NY,NZ/NPU,*)
      COMPLEX*16 B(NX,NY,*),BXPYZ(NX/NPU,NPU,NY,*),BXYZ(NX/NPU,NY,*),
     1           BXYZP(NX/NPU,NY*(NZ/NPU),*)
      COMPLEX*16 CY(NY+NP,*),CZ(NZ+NP,*),D(*)
      COMPLEX*16 WX(*),WY(*),WZ(*)
      DIMENSION LNX(*),LNY(*),LNZ(*)
C
      NNX=NX/NPU
      NNZ=NZ/NPU
      NN=NX*NY*NNZ
C
      IF (IOPT .EQ. 1) THEN
!$OMP DO
        DO 30 L=1,NPU
          DO 20 J=1,NY*NNZ
!DIR$ VECTOR ALIGNED
            DO 10 I=1,NNX
              BXYZP(I,J,L)=AXPYZ(I,L,J)
   10       CONTINUE
   20     CONTINUE
   30   CONTINUE
!$OMP BARRIER
!$OMP MASTER
        CALL MPI_ALLTOALL(BXYZP,NN/NPU,MPI_DOUBLE_COMPLEX,A,NN/NPU,
     1                    MPI_DOUBLE_COMPLEX,ICOMM,IERR)
!$OMP END MASTER
!$OMP BARRIER
      END IF
!$OMP DO
      DO 110 J=1,NY
        DO 100 II=1,NNX,NBLK
          DO 60 KK=1,NZ,NBLK
            DO 50 I=II,MIN0(II+NBLK-1,NNX)
!DIR$ VECTOR ALIGNED
              DO 40 K=KK,MIN0(KK+NBLK-1,NZ)
                CZ(K,I-II+1)=A(I,J,K)
   40         CONTINUE
   50       CONTINUE
   60     CONTINUE
          DO 70 I=II,MIN0(II+NBLK-1,NNX)
            CALL FFT235(CZ(1,I-II+1),D,WZ,NZ,LNZ)
   70     CONTINUE
          DO 90 K=1,NZ
!DIR$ VECTOR ALIGNED
            DO 80 I=II,MIN0(II+NBLK-1,NNX)
              BXYZ(I,J,K)=CZ(K,I-II+1)
   80       CONTINUE
   90     CONTINUE
  100   CONTINUE
  110 CONTINUE
!$OMP BARRIER
!$OMP MASTER
      CALL MPI_ALLTOALL(BXYZ,NN/NPU,MPI_DOUBLE_COMPLEX,AXYZP,NN/NPU,
     1                  MPI_DOUBLE_COMPLEX,ICOMM,IERR)
!$OMP END MASTER
!$OMP BARRIER
!$OMP DO
      DO 210 K=1,NNZ
        DO 190 L=1,NPU
          DO 180 II=1,NNX,NBLK
            DO 140 JJ=1,NY,NBLK
              DO 130 I=II,MIN0(II+NBLK-1,NNX)
!DIR$ VECTOR ALIGNED
                DO 120 J=JJ,MIN0(JJ+NBLK-1,NY)
                  CY(J,I-II+1)=AXYZP(I,J,K,L)
  120           CONTINUE
  130         CONTINUE
  140       CONTINUE
            DO 150 I=II,MIN0(II+NBLK-1,NNX)
              CALL FFT235(CY(1,I-II+1),D,WY,NY,LNY)
  150       CONTINUE
            DO 170 J=1,NY
!DIR$ VECTOR ALIGNED
              DO 160 I=II,MIN0(II+NBLK-1,NNX)
                BXPYZ(I,L,J,K)=CY(J,I-II+1)
  160         CONTINUE
  170       CONTINUE
  180     CONTINUE
  190   CONTINUE
        DO 200 J=1,NY
          CALL FFT235(B(1,J,K),D,WX,NX,LNX)
  200   CONTINUE
  210 CONTINUE
      RETURN
      END
